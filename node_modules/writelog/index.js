const fs = require("fs");
const dateFormatter = require("date-format");
const openInEditor = require("open-in-editor");

module.exports = function(
  name,
  content,
  config = {
    // support for snippet
    oneFile: true,
    history: 20,
    dir: "./.log/",
    dateFormat: "dd-MM-yyyy hh:mm:ss",
    openLog: true,
    separateLine: "------------------------------"
  }
) {
  var defaultConfig = {
    oneFile: true,
    history: 20,
    dir: "./.log/",
    dateFormat: "dd-MM-yyyy hh:mm:ss",
    openLog: true,
    separateLine: "------------------------------",
    ...config
  };

  config = defaultConfig;

  var logPath = config.dir;
  var logName = `${name}.log`;
  if (!config.oneFile) {
    logName =
      name + "_" + dateFormatter("yyyy-MM-dd_hh-mm-ss", new Date()) + ".log";
  }

  var filePath = logPath + logName;

  if (typeof content == "object") content = JSON.stringify(content, null, 4);

  if (!fs.existsSync(logPath)) {
    fs.mkdirSync(logPath);
  }

  var data = "";
  if (config.dateFormat != null)
    data += dateFormatter(config.dateFormat, new Date()) + " : ";

  data += content;

  if (config.oneFile) {
    var separator = `\n\n${config.separateLine}\n\n`;
    var oldData = fs.readFileSync(filePath, { flag: "a+" });
    data += separator + oldData;
    writeSingleFile(filePath, data, separator, config.history, config.clean);
  } else {
    writeSeparateFile(name, filePath, logPath, data, config.history);
  }
  if(config.openLog)
  openLog(filePath);
  return filePath;
};

function writeSingleFile(filePath, data, separator, history) {
  data = clearOldLogData(data, separator, history);
  fs.writeFileSync(filePath, data);
}

function writeSeparateFile(code, filePath, dirPath, data, limit) {
  fs.writeFileSync(filePath, data);
  clearOldLogFile(code, dirPath, limit);
}

function clearOldLogData(data, separator, limit) {
  var len = separator.length - 1;
  var match = 0;
  var index = 0;
  for (var i = 0; i < data.length; i++) {
    var curChar = data[i];
    if (curChar == separator[match + 1]) {
      if (++match >= len) {
        match = 0;
        if (++index >= limit) {
          return data.substr(0, i);
        }
      }
    }
  }
  return data;
}

function clearOldLogFile(code, logPath, limit) {
  var matchFile = [];
  fs.readdirSync(logPath).forEach(name => {
    if (name.startsWith(code)) {
      matchFile.push(name);
    }
  });
  matchFile
    .sort((a, b) => (a < b ? 1 : -1))
    .slice(limit)
    .forEach(name => {
      fs.unlinkSync(logPath + name);
    });
}

function openLog(path) {
  openInEditor
    .configure({
      editor: "code"
    })
    .open(path)
    .catch(err => {
      console.log(err);
    });
}
